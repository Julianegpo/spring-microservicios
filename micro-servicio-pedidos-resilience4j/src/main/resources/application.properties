spring.application.name=servicio-pedidos
server.port=8002

# indicamos a ribbon cuales son las instancias de producto disponibles
#servicio-productos.ribbon.listOfServers=localhost:8001,localhost:9001

eureka.instance.prefer-ip-address=true
# conexion a eureka
eureka.client.service-url.default=http://localhost:8761/eureka/

# aumentamos el timeout en hystrix (default 1s)
#hystrix.command.default.execution.isolation.thread.timeoutInMiliseconds=15000

################# RESILIENCE4J #################
# configurar los parametros del CircuitBreaker
# orders es el ID que usamos en el controller OrdersREST para crear el circuito
# asignar un nombre a la configuracion
resilience4j.circuitbreaker.instances.orders.base-config=default

# lanzamos 10 peticiones y cuando alcancemos el 50% de errores abrimos el circuito
resilience4j.circuitbreaker.configs.default.sliding-window-size=10
resilience4j.circuitbreaker.configs.default.failure-rate-threshold=50

# en estado abierto permaneceremos 20s antes de pasar a semiabierto
resilience4j.circuitbreaker.configs.default.wait-duration-in-open-state=20s
# en semiabierto, lanzamos una muestra de 5 peticiones
# si superamos el 50% de fallos (3 peticiones) volvemos a abrir el circuito
# si no las superamos (2 peticiones como maximo) cerramos el circuito
resilience4j.circuitbreaker.configs.default.permitted-number-of-calls-in-half-open-state=5

# configuramos las llamadas lentas
# cuando lanzo las 10 peticiones y el 50% tarda mas de 2s, abrimos circuito
resilience4j.circuitbreaker.configs.default.slow-call-duration-threshold=2s
resilience4j.circuitbreaker.configs.default.slow-call-rate-threshold=50
################# RESILIENCE4J #################